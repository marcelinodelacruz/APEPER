# Codificación de patrones de puntos en R   

```{r, echo=FALSE, eval=FALSE}
COMO HACER EL LIBRO.
EN LA CONSOLA DE MS2, ESCRIBIR:
quarto preview APP_ECOLOGIA_R
```

```{r, echo=FALSE, message=FALSE}
# Carga spatstat en silencio...OJO: NO SE CALLA
library(spatstat, quietly=TRUE)
```

Como hemos visto en la introducción, todo patrón de puntos está definido por las coordenadas de los puntos que lo integran más la "ventana" (el polígono) que lo delimita. 

## Lectura de datos   

`read.xlsx`
Leer shapefiles
Lectura de imagenes/transformación a formato img


```{r, eval=FALSE}
library(xlsx)
datos<- read.xlsx("datos.xlsx", sheetIndex=1)
head(datos)
## Poner aquí un trozo de la salida

```   


::: callout
## Generación de datos geoestadísticos
La generación de interpolaciones estadísticas está fuera del objetivo del libro, pero por conveniencia se incluye aquí un ejemplo de la herramienta `automap`

```{r, eval=FALSE}
# POner un ejemplo con automap y su conversión a im de spatstat.
## Poner aquí un trozo de la salida

```   

:::





## Definición de la ventana    
Lo más conveniente suele ser comenzar definiendo la ventana. En **spatstat** lo hacemos con la función `owin`. Por ejemplo, si nuestros puntos están recogidos dentro de un cuadrado que se extiende entre las coordenadas relativas `x= c(0, 100) , y = c(0, 100)`, sólo deberemos indicarle a `owin` la extensión de la ventana en el eje $x$ y en el eje $y$.      

```{r, eval=FALSE}
library(spatstat)
ventana <- owin(xrange = c(0, 100), yrange=c(0,100))
ventana
## window: rectangle = [0, 100] x [0, 100] units

```   
Si la ventana es estrictamente cuadrada, también la podemos definir usando la función `square` e indicando el tamaño del lado de la misma.


```{r, eval=FALSE}
ventana <- owin(square(r=100))
ventana
## window: rectangle = [0, 100] x [0, 100] units

``` 
La ventana creada (@fig-ventana) la podemos visualizar con `plot(ventana)`.   

![Ventana creada con la función owin](images/ventana.png){#fig-ventana}

En el caso de ventanas irregulares, las coordenadas de los puntos que definen los vértices de la misma se proporcionan  con el argumento `poly` y deben ir en forna de lista (`list`), con dos componentes denominados específicamente $x$ e $y$:


```{r, eval=FALSE}
borde <- list(x=c(0.2,0.3,0.5, 0.8,0.6,0.3),
		  y=c(0.1,0.1,0.2, 0.5,0.7,0.3))
ventana2 <- owin(poly= borde)
ventana2
## window: polygonal boundary
## enclosing rectangle: [0.2, 0.8] x [0.1, 0.7] units


```    

::: callout-warning
Es importante que  las coordenadas de los vértices estén ordenadas en sentido antihorario.
:::




## Creación del patrón de puntos    

## Coordenadas absolutas o coordenadas relativas    
`affine.ppp`  y `affine.owin`   



## Patrones de puntos marcados

### Marcas discretas    
### Marcas continuas 
### Marcas múltiples
### Marcas funcionales



See @knuth84 for additional discussion of literate programming.
